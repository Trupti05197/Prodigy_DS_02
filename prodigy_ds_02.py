# -*- coding: utf-8 -*-
"""PRODIGY_DS_02.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZgB6BQ0FxOfGzKZLK20QnKrEKmVZPIcI
"""

#Import libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import warnings
warnings.filterwarnings("ignore")

#Read and load data:
df=pd.read_csv('/content/drive/MyDrive/Prodigy_Internship/heart.csv')

df.info()

df.head()

#Check missing values:
df.isna().sum()

#Summary statistics
df.describe()

#Histogram for Age distribution:
sns.histplot(df['age'], kde=True, bins=20, color='skyblue')
plt.title('Age Distribution')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.show()

#Histogram for Gender distribution:
sns.countplot(x='sex', data=df, palette='Set2')
plt.title('Gender Distribution')
plt.xlabel('Gender (0 = Male, 1 = Female)')
plt.ylabel('Count')
plt.show()

#Correlation heatmap:
plt.figure(figsize=(10, 6))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title("Feature Correlation Heatmap")
plt.show()

#Model building
X = df.drop(columns=['target'])
y = df['target']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

# Standard scaler
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

#Model fitting
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)

print(f"\n Model Accuracy: {accuracy:.2%}")
print("\n Classification Report:")
print(classification_report(y_test, y_pred))

# Patterns and Trends Identification between Age and target variable:
sns.lineplot(x='age', y='target', data=df, marker='o')
plt.title('Heart Disease Cases Over Time')
plt.xlabel('Age')
plt.ylabel('Heart Disease Cases')
plt.show()

# Patterns and Trends Identification between Resting Blood Pressure and target variable:
sns.lineplot(x='trestbps', y='target', data=df, marker='o')
plt.title('Heart Disease Cases Over Time')
plt.xlabel('Resting Blood Pressure')
plt.ylabel('Heart Disease Cases')
plt.show()

